"Previous Section"_Manual.html - "ChemCell WWW Site"_cws - "ChemCell
Documentation"_cd - "ChemCell Commands"_cc - "Next
Section"_Section_start.html :c

:link(cws,http://www.cs.sandia.gov/~sjplimp/ChemCell.html)
:link(cd,Manual.html)
:link(cc,Section_commands.html#comm)

:line

1. Introduction :h3

These sections provide an overview of what ChemCell can do, describe
what it means for ChemCell to be an open-source code, and acknowledge
the funding and people who have contributed to ChemCell.

1.1 "What is ChemCell"_#1_1
1.2 "Open source distribution"_#1_2
1.3 "Acknowledgments"_#1_3 :all(b)

1.1 What is ChemCell :link(1_1),h4

ChemCell is a particle-based reaction/diffusion simulator designed to
model signaling, regulatory, or metabolic networks in biological
cells.  It can be run as a spatial simulator where the particles
diffuse within the specified geometry of a cell, or as a non-spatial
simulator where there is no diffusion and the network of chemical
reactions is time-integrated as a set of ODEs or stochastically via
the Gillespie Stochastic Simulation Algorithm (SSA).

For spatial simulations, a single protein, protein complex, or other
biomolecule is represented as a dimensionless particle.  The geometry
of a cell (membranes, organelles, etc) is represented as simple
geometrical objects (spheres, boxes, etc) or as triangulated surfaces.
Particles diffuse randomly via Brownian motion, either in 3d or on 2d
surfaces.  Biochemical reactions occur in accord with chemical rate
equations, which are inputs to ChemCell.  Monte Carlo rules are used
to perform reactions each timestep between pairs of nearby particles.

For non-spatial simulations, the cell is treated as a well-mixed
chemical reactor, and the chemical rate equations can be
time-integrated either by a fixed-step or adaptive-timestep ODE solver
or by the direct-method variant of the Gillespie Stochastic Simulation
Algorithm (SSA) using the Gibson/Bruck methodology.

ChemCell runs on single-processor desktop or laptop machines, but can
also be run in parallel.  Multiple runs can be performed on a
collection of processors (for statistical purposes), or (for spatial
simulations) the simulation domain can be partitioned across
processors and a single simulation run in parallel.  For spatial
simulations, ChemCell can model systems with only a few particles up
to many millions.

:link(mpi,http://www-unix.mcs.anl.gov/mpi)

ChemCell is a freely-available open-source code, distributed under the
terms of the "GNU Public License"_gnu, which means you can use or
modify the code however you wish.  See "this section"_#1_2 for a brief
discussion of the open-source philosophy.

:link(gnu,http://www.gnu.org/copyleft/gpl.html)

ChemCell is designed to be easy to modify or extend with new
capabilities, such as modified reaction rules or boundary conditions.
See "this section"_Section_modify.html for more details.

ChemCell is written in C++ and can be downloaded from the "ChemCell
WWW Site"_lws.  No additional software is needed to run ChemCell in
serial on a desktop machine.  ChemCell will run on any parallel
machine that compiles C++ and supports the "MPI"_mpi message-passing
library.  This includes distributed- or shared-memory parallel
machines and Beowulf-style clusters.  To run with spatial parallelism,
the "Zoltan library" must also be installed.

:link(zoltan,http://www.cs.sandia.gov/zoltan.html)

:link(snl,http://www.sandia.gov)

ChemCell does not have the ability to create cellular geometries or
visualize simulation output.  Currently, these tasks are handled by
pre- and post-processing codes.  Our group has written a separate
toolkit called "Pizza.py"_pizza which provides tools for doing setup,
analysis, plotting, and visualization for ChemCell simulations.
Pizza.py is written in "Python"_python and is available for download
from "the Pizza.py WWW site"_pizza.

:link(pizza,http://www.cs.sandia.gov/~sjplimp/pizza.html)
:link(python,http://www.python.org)

These are other simulation codes, similar in spirit to ChemCell, which
model biochemical networks of reacting/diffusing chemical species
within a spatial geometry:

"VCell"_vcell - by Jim Schaaf and Les Loew (NRCAM, U Conn Health Center)
"MCell"_mcell - by Joel Stiles (PSC) and Tom Bartol (Salk Institute)
"MesoRD"_meso - by Johan Hattne (EMBL) and Johan Elf (Uppsala Univ)
"Smoldyn"_smoldyn - by Steve Andrews (TMSI) :ul

:link(vcell,http://www.nrcam.uchc.edu/index.html)
:link(mcell,http://www.mcell.cnl.salk.edu)
:link(meso,http://mesord.sourceforge.net)
:link(smoldyn,http://www.smoldyn.org)

:line

1.2 Open source distribution :link(1_2),h4

ChemCell comes with no warranty of any kind.  As each source file states
in its header, it is a copyrighted code that is distributed free-of-
charge, under the terms of the "GNU Public License"_gnu (GPL).  This
is often referred to as open-source distribution - see
"www.gnu.org"_gnuorg or "www.opensource.org"_opensource for more
details.  The legal text of the GPL is in the LICENSE file that is
included in the ChemCell distribution.

:link(gnuorg,http://www.gnu.org)
:link(opensource,http://www.opensource.org)

Here is a summary of what the GPL means for ChemCell users:

(1) Anyone is free to use, modify, or extend ChemCell in any way they
choose, including for commercial purposes.

(2) If you distribute a modified version of ChemCell, it must remain
open-source, meaning you distribute it under the terms of the GPL.
You should clearly annotate such a code as a derivative version of
ChemCell.

(3) If you release any code that includes ChemCell source code, then it
must also be open-sourced, meaning you distribute it under the terms
of the GPL.

(4) If you give ChemCell files to someone else, the GPL LICENSE file and
source file headers (including the copyright and GPL notices) should
remain part of the code.

In the spirit of an open-source code, if you use ChemCell for
something useful or if you fix a bug or add a new feature or
applicaton to the code, let us know.  We would like to include your
contribution in the released version of the code and/or advertise your
success on our WWW page.

:line

1.3 Acknowledgements :h4,link(1_3)

ChemCell is distributed by "Sandia National Laboratories"_sandia.
ChemCell development has been funded by the "US Department of
Energy"_doe (DOE), through its LDRD program and through its
"Genomes-to-Life program"_gtl via the "ASCR"_oascr and "BER"_ober
offices.

The original version of ChemCell was part of the "GTL project"_ourgtl
"Carbon Sequestration in Synechococcus Sp.: From Molecular Machines to
Hierarchical Modeling".

:link(sandia,http://www.sandia.gov)
:link(doe,http://www.doe.gov)
:link(gtl,http://www.doegenomestolife.org)
:link(ourgtl,http://www.genomes2life.org)
:link(oascr,http://www.sc.doe.gov/ascr/home.html)
:link(ober,http://www.er.doe.gov/production/ober/ober_top.html)

If you use ChemCell results in your published work, please provide a
link to the "ChemCell WWW page"_cws and cite one of the ChemCell
papers listed there.

If you send information about your publication, we'll be pleased to
add it to the Publications page of the "ChemCell WWW Site"_cws.  Ditto
for a picture or movie for the Pictures or Movies pages.

The authors of ChemCell are "Steve Plimpton"_sjp and Alex Slepoy of
Sandia National Labs who can be contacted via email at sjplimp at
sandia.gov or alexander.slepoy at nnsa.doe.gov.

:link(sjp,http://www.cs.sandia.gov/~sjplimp)

We thank Larry Lok and Roger Brent at the Molecular Sciences Institute
(TMSI) for help in designing ChemCell.  We also thank Dan Gillespie
for constructive feedback on algorithms and Steve Andrews (LBNL, now
TMSI) for helping us understand and use output from his Smoldyn code
in ChemCell.
