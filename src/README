ChemCell ideas and bugs

--------------------------------------------

release:
  is there a restart2data tool?  
    if so, should be mentioned in docs for read_restart and write_restart
      and restart
  permeable needs to allow wildcards for surf and species IDs
  citations in a couple of the *.txt doc files

should I push particles onto surf when read them in, or let that
  wait until 1st timestep where them move
  what if they never move (D = 0) ?

look at throwing an error if total bin count on 1 proc is too big
  since code will use huge memory

memory print out goes negative for largest runs on Storm
  due to int overflow

when one pair of reactants can do multiple binary reactions
  logic only works currently if cutoff distance is same for all
  if distance are different, only one distance is being tested against
    probably the max distance
  
cdata issue:
  c.unselect("cell") doesn't seem to work
  how to draw 1/2 of a triangulated surf?
    need way to select subset of triangles
    could I create a 2nd surf using surftri() and an x < 0.0 ??
      would be nice to be able to slice it open like in movie of Sharon's
      this would mean a select string is passed in
  g.size(512,200) does not work in gl or vcr tool

randomness for fix specify doesn't look good, looks correlated on surf

error projecting E Coli receptors onto curved surf with 2nd method so
  get projection from a point

look at converting motion() into single-particle move routine
  could be called from reaction, when place products
  at unbinding radius
  this would allow full Smoldyn implementation

reaction stats on nbinbin, nbinpart will overflow soon

how to speed up reactions:
  figure out optimal size for bins or how to loop over bins
  thought answer would be bin as small as possible
  could have one set of big move bins, small react bins
    latter could be subset (e.g. 3x, 4x) of former
    would still load-balance and particle-migrate on larger
  could iterate move/migrate several times before do react ?
    this would let move's and decomp use small react bins
  could let move happen across several bins
    then decomp and migrate has to have several layers of ghosts

what will happen in E Coli (or other sim) when FliM is "on" upper non-PBC boundary
  answer: it will lose particles
  so have to expand box size a bit at upper edge

error check for read/write restart
  species in bounds, bin (glob/local) the same, does tri exist

now do mono, binary - how to do zero-order reactions?

print out reaction stats for each reaction at beginning
  maybe just to log file

ask Andrews:
  diff step is so big, radii is so small, does this mean diff limited
  doesn't one react have unbinding radii?

when do multiple simulations, why don't need clear between?

print out prob/cutoff for all reactions

random number bug:
  some created chem particles are getting assigned same RNG
  which means they move in coordinated way

multiple layers of ghost cells:
  advantage: bin size could be reaction specific, not diffusion
  move: have to allow particles to travel multiple bins
  need geometry for all layers of ghost bins
  still want ghost particles only for one layer of upwind ghost bins
  grid: have to enhance nbinxyz, xyz-offset to allow this
    all low-level geometry routines (whichglobal, etc) need to allow this
  balance: will have to allow this flexibility

possible bugs:
  what if A + B -> C and A + B -> D are both listed reactions?
    do I let both occur with correct prob?
    same for A -> B and A -> C
    Andrews paper says this prob needs to be done different
    also says that mono prob is not simply K dt but 1 - exp(-K dt)
  Andrews may be doing mono and dual reactions in different order
    should I change this as well in react()
  am I enforcing one reaction per particle per step?
  should skip out of react when a particle is not part of any dual reaction
  is ER surf specified inside/out - may need to flip triangle ordering
  do I allow multiple triangle commands to assign to same surf
    both in ChemCell and Pizza.py
    do I need to allow it?
  if tri or region is aligned with boundary between 2 hexes
    it will be stored by both hexes
    will collide with it twice, once as moves in each hex
    not sure what to do about this
  if have box region on upper boundary (non periodic)
    particles on that surf will be lost b/c will be mapped to next bin up
    same error for grid-?whichglobal() - will think particle is in next bin up

balancing:
  dynamic LB of ER surf seems slow on my box, will it be on true parallel mach
    time is in RCB
  should self-copy bins and particles if I own old and new bin
    tricky to know owner/ghost of old and new
      or could just look it up in old data struct if know old ilocal
    this was what old code did
    else will do lots of copies of stuff
    end up doing only a 
    could copy geometry by copying a single ptr
      but then don't delete that old bin's geometry
      need to flag it
    could copy particle's by changing local bin assignment
      and copying one ptr
      then need to flag particle's that are being moved and do a compact

spatial/ssa alg with PBC is slower than spatial
  for kinase = 2-3x slower - 8^3 global grid
  most of cost is elist_all which is bulk of time
  just more expensive to loop over ghost cells, but seems like too much
  odd thing is reaction overlap and count doesn't increase much with ghosts

2d diffusion with SQUARE setting:
  still need to set scale correctly in move::init() in this section:
  don't think it is like the 2d surf scale factor
  // sample uniformly
  // 3d samples box extent from -0.5 to 0.5
  // 2d samples radius from 0 to 1

chem_sssa alg:
  memory savings?
  instead of 2d CHUNK array for elist, could do linked list I think
  only true if never need to access an elist element directly 
  could allocate like I do migrate actions or index for grid cells
  would have to deallocate quickly
  compare memory vs speed trade-off
  not possible for reactions since have to index them directly via n variable
    chem_sssa::reactions()
      n = static_cast<int> (r3 * nrlist[ireact]);

tri surfs:
  should different sets of triangles be added to same surf
  or always a new surf-ID ??

permeable command:
  allow both species-ID and surf-ID to have wildcards

permeation specification:
  turn permeation into flux term
  how many particles per sec escape thru a boundary
  if hit surface and should bounce, just retry with new
    random move until don't hit surface
  or could move partial timestep to surface
    then do random move for remaining time, but don't let
    it hit surface

implement fixes in new code:
  fix to keep concentration constant
  fix to delete/add particles in a geometric region
  etc

pizza bug in ccell
  blist is ascii, not flag so min/max is bad

need to compare CCell Gillepsie to Alex's to see if same results
  all 3 algorithms in code + Smoldyn + non-interacting Gillepsie in bins
  same for all timsteps and D values ?

doc for propensity in new ssa-spatial alg:
  consider A + B -> C
  Gillespie:
    # of reactions in dt = Na Nb k dt / (Avo V)    V = Volume
    propensity = Na Nb k / Avo V
  ssa-spatial:
    we are reducing Na Nb to be # of A,B within distance d
    so need to boost k by that amount to get same propensity
    if have Na, Nb in V, what # of pairs are within d
    # of pairs within d = Na Nb V_cut / V    V_cut = 4/3 pi d^3
    so boost k by V/V_cut by using k_original V/V_cut, V gets cancelled
    propensity = (# of actual A,B within d) k_original / (Avo V_cut)
      no more volume dependence

problem with apatial alg as try to use it over range of D, dt
  prob = k dt / Avo V_cut
  both dt and V_cut depend on dt
  so as change dt, often get probabilities > 1, cannot run
  this is for "probability diff" option
  else if use "probablility max" option, end up using very large cutoff
    radii, which are non-physical for diffusion rates and dt

test in.aab
  what should rate for A + A -> B and B -> A + A be ??
  for all 3 algorithms

new algorithm:
  known bug: 1st step of ssa and spatial does not agree for in.abc for
    # of rsq calcs done (pairs of particles considered) - reason is
    bug in spatial when color bin is non-exist it is not colored - then
    some bin-bin interactions are missed - solution is to get rid
    of exist - so test again for agreement when do this
  play with CHUNK for computational speed-up
  what about A + A reaction - is it correct in spatial and ssa/spatial ?
  how to handle chem time vs diff time, can be < or >
    think of extreme limits with many or no reactions
    should particles only diffuse for part of dt after created ?
      is this same as treating D move as a Gillepsie channel?
    what to do with last chem step if it is larger than dt
    what if no chem reaction takes place in entire dt - what to do?
  error in gillespie and ssa/spatial if total propensity = 0.0

allow NULL reactions that have no reactants but produce products
  k = units of 1/volume-time
  one problem is how to create their position
    works fine for Gillespie but not spatial options

bugs:
  in.diff.2d
  if run in.bicarb with 1.0e-9 as diff (for bin command) and MAXTRI = 100
    then does initial malloc of 650 Mb and fails in this line:
      blist[i].exist = exist_check(iglobal);
    on a certain bin - valgrind doesn't help

Alex:
  loop over particle instead of bins for reactions (implement as option)
  different stencils (as option)

still need:
  is A + A -> B correct - test it vs Moleculizer and Alex's Gillespie
  is this correct: allow 2 reactions with same 2 reactants
  test for surfs being less than X degrees apart in normals
    else push-off may not succeed in putting particle on correct side of surf
    place where push_away or push_off is needed:
      when a reaction occurs and a 2d particle becomes a 3d on one side of tri
      when hit tri and permeability is NEAR or FAR - need to place particle
  insure Ray & Alex add timestep to surf files
  could match() in react.cpp be simpler now that particles are sorted?
  compare abc,kinase output to old code for speed,accuracy
  test if sorting insures same answer independent of P, or not if turn off
    look if overlap count is same, # of reactions, dump files
  convert loop over bins, to list of bins generated from particles
    not sure how to do this
    can I change bin loop to particle loop?
    still preserve same answer independent of P?
    within color scheme, any way to loop over particles, not bins?

react_modify:
  use wildcards, like for species-IDs ??
  
performance:
  in balance, when ship requested tri and vert around I am sending
    multiple copies, because multiple copies were requested
    could not request if have already, but need way to get final count
      correct when receive it once - could embed count in request
      and have it sent back
    would need to scan my request list to see if already in there
  react comm time and particle migration time is dominating
  do I need to put barriers before timers
  what happens when react bin size << move bin size
    will this ever be case when go to overlap integrals since reac = diff
    could I sub-sort in mini-bins inside move bins
      just for purpose of finding reaction partners

general:
  error checks for inconsistent geometry everywhere:
    for particles in wrong bin (due to round-off, etc)
    could be in Bin::whichbin() if will never pass out-of-range particle
    for invalid bin # in global2local - if ever generate bin I don't own
  memory leak checks via valgrind in parallel and serial pre-processor
  restarts?
  look for all loops over bins (as opposed to particles)
    try to eliminate all these for cases where bins >> particles
  don't like how system::init() is now organized with memory_usage() call

continuum:
  could run a continuum species as a bin variable
    update bin variables from file (Salsa run)
    reaction of a particle against the continuum (with the bin its in)
    assumes continuum never really changes due to particle diffusion/reactions
  compare to egg wave simulation of Salsa

parallel:
  like LAMMPS, have universe & variables so can run independent jobs
    on multiple worlds

timestep:
  if timestep increased between runs:
    old bins could be too small, illegal
  if timestep shrinks between runs:
    old bins could be too large, inefficient

balance:
  could communicate tri normals rather than re-compute after balance
  for particle reply, could be using one message of variable length
  Zoltan issues that Karen will provide:
    for balancing bins, need cuts to be made inbetween bins
    need query after LB to return global bbox and my proc box
    some way to get cut output, so can do viz?
      allow file arg for output - then what if use balance command again?
    is it OK to use balance command several times to change options
    should 2,4,8 procs make same cuts?  only if certain flag is set

computations:
  do simulation results change with D, timestep, N
    should get same answer as timestep shrinks
    pair should not have more opportunities to react as timestep shrinks
  re-do the 3-level kinase cascade
  do the 50-reaction alpha pathway problem
  identify transition from Gillespie <-> spatial, depends on D, timestep
    as D -> large, would like it to converge to Gillespie result

speed:
  be careful about looping over particles vs bins
    are there no bin loops, other than in balancer?
    there is a bin loop in reactions - could change this to particle
      loop if do a pre-list of red particles, etc
  simulation time should be fastest when bins are as small as possible
    only if nothing depends on number of bins

particle IDs
  want a unique ID for each particle?
    or could just dump particle seed
    close to unique
    with other attributes, should be unique
  desirable for debugging and sorting (for reactions) and output
  assigned at read, reaction create, on-the-fly create
    tough one is reaction create
  always increase IDs consecutively, even when particles drop out by deletion
  particle has 5 attributes: xyz, species, seed
    can there be ties where 2 particles have all 5 attributes the same?
    want to avoid ever having 2 particles with same ID
  once have unique IDs:
    include them as tag in dump
    could do match() function just on ID
    or could hash on ID so could find particle directly

random:
  doc how we insure answer independent of P
    depends on ordering within reactions
      need sort of particles within bins?
  use different RNG for react() vs move() ?
  maybe should use ran1 in Num Recip for react and move
  currently using Park/Miller 2 for particle read-in and product-create
  using Park/Miller standard for particle move and react
  they use same range, so seeds are interchangeable between them

bins:
  bin data struct optimized - any way to not store 7 downwind procs?
    could store exist, global, etc as bit-flags
    could get rid of nparts and just use flag to count particles
      be careful in balance() to 0 flag after RCB
      also be careful to set flag for all bins to 0 when create in 2 places
        instead of nparts
  implement z-dir PBC, so can have 2 or 4 bins in z-dir
    still need ghost bins in z-dir
    real bins in z-dir need to be multiple of 2 for coloring?
    triangles need to be big enough to go thru ghosts
    particles need to move in PBC fashion, re-enter at other end
    insure procs own entire z-dim
  does it matter in collate, what order own/ghost particles go into bins?

move:
  return from point_tri_move of EDGE or VERTEX is now bogus
    do I need to do something if bounce off a vertex?
  worry about generated 2d move dir
    should it be normalized
    what if choosed random cross product that is 0.0
    what if not in plane of triangle
  1st move idea:
    pre-compute 1,000,000 possible moves (in reduced units) = 25 Mb
      store in 2d array[1000000][3] 
    could be on sphere or cube or Brownian or uniform in pre-computation
    actual move selects RN from 1 to 1M, indexes into 2d array
    does this make move as fast as possible?
      need to compare with way doing it now
    decide if should truncate at max distance
  2nd move idea:
    pre-compute list of 1d Gaussian distributed RN - say 1M or 10K of them
    actual move generates 3 RN, picks out 3 Gaussian numbers for x,y,z

permeable:
  should this command have option to specify how particles interact
    with global BC?

react:
  if want a cascade of reactions to occur when the 1st reaction happens,
    could specify a series of further events via react_modify, so long
    as they don't require more reactants to be present, which might not
    be close by
  we are using 1 RNG per particle pair, what if found all partners of atom
    I and used 1 RNG to choose between all partners
    would change stencil and coloring, how to preserve same answer for all P
  should particle sort not be based on seed, since low-seeds-first might
    bias reactions?
  already skip reactions if no reactions defined
    should also skip binning part if no dual reactions defined
  need to allow multiple mono and pair-wise reactions for same reactant
    choose between them via random #'s
    can one reactant participate in both dual and mono reactions?
  epsilon placement of 3d particle near 2d surf:
    should I update ibin of new particle
    is +/- 1 sense of inside/outside correct
  when recv reacted particles:
    more efficient way to find them than scanning thru bin for a match
      maybe a hash on particle ID
    is match on x,y,z and species sufficient?
  should I have a dual[nspecies] flag to skip out of particle I if it
    participates in no dual reactions?
  implement OVERLAP integral into code
    need to scale it by probability
    like integral of OVERLAP from R=0 to Rcut
      multiplied by some normalization
  should reaction cutoff distance be sum of 2 diffusion distances?
  write down how old style (2 overlapping spheres with Prob P inverse to Vol)
    is like poor-mans OVERLAP - is it like a non-varying OVERLAP with
    height = Prob, now I have to scale ab initio OVERLAP up to get same
    integrated area under curve? - is this like separating K into
    2 parts (collision and barriers)?
  if ever want react_modify loc option to put a product at midpt
    of 2 reactants: problem is what bin is it, is it being put on other
    side of some surf, etc
  after successful react could assume reaction occurred at random time and
    move those particles some fraction of dt - but don't react again
    is kind of like move and react happening at same time
  insure not double counting of A + A -> B reaction
    make sure understand factor of 2 in Shimizu for reaction rate
    does rate have different meaning for A + A vs A + B ?

create:
  ability to create particles over time, maintain density
    need sources/sinks where know it is safe to generate points
  specify concentration instead of N
    both assume ability to compute volume of closed surface

Synecho problem:
  are we increasing the # of ribulose molecules over time?
    is that physical?
  need to let CO_2 leak out of carboxysome
  spatial issues to examine:
    does glucose change with inverted CA/RuBisCO positions
  what permeability and reaction rates is glucose production sensitive to?
  add more carboxysomes
  add other compartments for other parts of cycle
  add more reactions for more of cycle
  is there anything quantitative to compare to
  is there any bio question we can answer

decomposition ideas:
  Alex idea: use a oct-tree to have variable grid - allow fine cells around
    organelles, coarse cells outside cell
  how would I do reaction stencil in this scenario?
